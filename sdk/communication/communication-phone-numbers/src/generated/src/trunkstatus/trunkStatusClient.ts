/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TrunkStatusClientContext } from "./trunkStatusClientContext";
import {
  TrunkStatusClientOptionalParams,
  GetTrunksStatusOptionalParams,
  GetTrunksStatusResponse,
  GetTrunkStatusOptionalParams,
  GetTrunkStatusResponse
} from "./models";

export class TrunkStatusClient extends TrunkStatusClientContext {
  /**
   * Initializes a new instance of the TrunkStatusClient class.
   * @param endpoint The communication resource, for example https://resourcename.communication.azure.com
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: TrunkStatusClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Gets list of all the trunks SBC status for resource
   * @param options The options parameters.
   */
  getTrunksStatus(
    options?: GetTrunksStatusOptionalParams
  ): Promise<GetTrunksStatusResponse> {
    return this.sendOperationRequest({ options }, getTrunksStatusOperationSpec);
  }

  /**
   * Gets SBC status for trunk
   * @param fqdn FQDN of the trunk to get status for
   * @param options The options parameters.
   */
  getTrunkStatus(
    fqdn: string,
    options?: GetTrunkStatusOptionalParams
  ): Promise<GetTrunkStatusResponse> {
    return this.sendOperationRequest(
      { fqdn, options },
      getTrunkStatusOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getTrunksStatusOperationSpec: coreClient.OperationSpec = {
  path: "/sip/trunks/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Trunks
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getTrunkStatusOperationSpec: coreClient.OperationSpec = {
  path: "/sip/trunks/{fqdn}/status",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SBCStatus
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.fqdn],
  headerParameters: [Parameters.accept],
  serializer
};
