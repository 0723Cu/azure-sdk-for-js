/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CreateCallRequest as CreateCallRequestMapper,
  AnswerCallRequest as AnswerCallRequestMapper,
  RedirectCallRequest as RedirectCallRequestMapper,
  RejectCallRequest as RejectCallRequestMapper,
  TransferToParticipantRequest as TransferToParticipantRequestMapper,
  AddParticipantsRequest as AddParticipantsRequestMapper,
  RemoveParticipantsRequest as RemoveParticipantsRequestMapper,
  PlayRequest as PlayRequestMapper,
  RecognizeRequest as RecognizeRequestMapper,
  StartCallRecordingRequest as StartCallRecordingRequestMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const createCallRequest: OperationParameter = {
  parameterPath: "createCallRequest",
  mapper: CreateCallRequestMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-01-15-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const repeatabilityRequestID: OperationParameter = {
  parameterPath: ["options", "repeatabilityRequestID"],
  mapper: {
    serializedName: "Repeatability-Request-ID",
    type: {
      name: "Uuid"
    }
  }
};

export const repeatabilityFirstSent: OperationParameter = {
  parameterPath: ["options", "repeatabilityFirstSent"],
  mapper: {
    serializedName: "Repeatability-First-Sent",
    type: {
      name: "String"
    }
  }
};

export const answerCallRequest: OperationParameter = {
  parameterPath: "answerCallRequest",
  mapper: AnswerCallRequestMapper
};

export const redirectCallRequest: OperationParameter = {
  parameterPath: "redirectCallRequest",
  mapper: RedirectCallRequestMapper
};

export const rejectCallRequest: OperationParameter = {
  parameterPath: "rejectCallRequest",
  mapper: RejectCallRequestMapper
};

export const callConnectionId: OperationURLParameter = {
  parameterPath: "callConnectionId",
  mapper: {
    serializedName: "callConnectionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const transferToParticipantRequest: OperationParameter = {
  parameterPath: "transferToParticipantRequest",
  mapper: TransferToParticipantRequestMapper
};

export const addParticipantsRequest: OperationParameter = {
  parameterPath: "addParticipantsRequest",
  mapper: AddParticipantsRequestMapper
};

export const removeParticipantsRequest: OperationParameter = {
  parameterPath: "removeParticipantsRequest",
  mapper: RemoveParticipantsRequestMapper
};

export const participantMri: OperationURLParameter = {
  parameterPath: "participantMri",
  mapper: {
    serializedName: "participantMri",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const playRequest: OperationParameter = {
  parameterPath: "playRequest",
  mapper: PlayRequestMapper
};

export const recognizeRequest: OperationParameter = {
  parameterPath: "recognizeRequest",
  mapper: RecognizeRequestMapper
};

export const startCallRecording: OperationParameter = {
  parameterPath: "startCallRecording",
  mapper: StartCallRecordingRequestMapper
};

export const recordingId: OperationURLParameter = {
  parameterPath: "recordingId",
  mapper: {
    serializedName: "recordingId",
    required: true,
    type: {
      name: "String"
    }
  }
};
