/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  CallConnectionGetCallOptionalParams,
  CallConnectionGetCallResponse,
  CallConnectionHangupCallOptionalParams,
  CallConnectionTerminateCallOptionalParams,
  TransferToParticipantRequest,
  CallConnectionTransferToParticipantOptionalParams,
  CallConnectionTransferToParticipantResponse,
  CallConnectionGetParticipantsOptionalParams,
  CallConnectionGetParticipantsResponse,
  AddParticipantsRequest,
  CallConnectionAddParticipantOptionalParams,
  CallConnectionAddParticipantResponse,
  RemoveParticipantsRequest,
  CallConnectionRemoveParticipantsOptionalParams,
  CallConnectionRemoveParticipantsResponse,
  CallConnectionGetParticipantOptionalParams,
  CallConnectionGetParticipantResponse
} from "../models";

/** Interface representing a CallConnection. */
export interface CallConnection {
  /**
   * Get call connection.
   * @param callConnectionId The call connection id.
   * @param options The options parameters.
   */
  getCall(
    callConnectionId: string,
    options?: CallConnectionGetCallOptionalParams
  ): Promise<CallConnectionGetCallResponse>;
  /**
   * Hangup the call.
   * @param callConnectionId The call connection id.
   * @param options The options parameters.
   */
  hangupCall(
    callConnectionId: string,
    options?: CallConnectionHangupCallOptionalParams
  ): Promise<void>;
  /**
   * Terminate a call using CallConnectionId.
   * @param callConnectionId The terminate call request.
   * @param options The options parameters.
   */
  terminateCall(
    callConnectionId: string,
    options?: CallConnectionTerminateCallOptionalParams
  ): Promise<void>;
  /**
   * Transfer the call to a participant.
   * @param callConnectionId The call connection id.
   * @param transferToParticipantRequest The transfer to participant request.
   * @param options The options parameters.
   */
  transferToParticipant(
    callConnectionId: string,
    transferToParticipantRequest: TransferToParticipantRequest,
    options?: CallConnectionTransferToParticipantOptionalParams
  ): Promise<CallConnectionTransferToParticipantResponse>;
  /**
   * Get participants from a call.
   * @param callConnectionId The call connection Id
   * @param options The options parameters.
   */
  getParticipants(
    callConnectionId: string,
    options?: CallConnectionGetParticipantsOptionalParams
  ): Promise<CallConnectionGetParticipantsResponse>;
  /**
   * Add participants to the call.
   * @param callConnectionId The call connection Id
   * @param addParticipantsRequest The add participants request.
   * @param options The options parameters.
   */
  addParticipant(
    callConnectionId: string,
    addParticipantsRequest: AddParticipantsRequest,
    options?: CallConnectionAddParticipantOptionalParams
  ): Promise<CallConnectionAddParticipantResponse>;
  /**
   * Remove participant from the call using identifier.
   * @param callConnectionId The call connection id.
   * @param removeParticipantsRequest The participants to be removed from the call.
   * @param options The options parameters.
   */
  removeParticipants(
    callConnectionId: string,
    removeParticipantsRequest: RemoveParticipantsRequest,
    options?: CallConnectionRemoveParticipantsOptionalParams
  ): Promise<CallConnectionRemoveParticipantsResponse>;
  /**
   * Get participant from a call.
   * @param callConnectionId The call connection Id
   * @param participantMri MRI of the participant to retrieve.
   * @param options The options parameters.
   */
  getParticipant(
    callConnectionId: string,
    participantMri: string,
    options?: CallConnectionGetParticipantOptionalParams
  ): Promise<CallConnectionGetParticipantResponse>;
}
