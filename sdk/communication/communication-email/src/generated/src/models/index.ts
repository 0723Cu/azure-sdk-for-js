/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Status of an email message that was sent previously. */
export interface SendStatusResult {
  /** System generated id of an email message sent. */
  messageId: string;
  /** The type indicating the status of a request. */
  status: SendStatus;
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: CommunicationError;
}

/** The Communication Services error. */
export interface CommunicationError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: CommunicationError;
}

/** Message payload for sending an email */
export interface EmailMessage {
  /** Custom email headers to be passed. */
  headers?: { [propertyName: string]: string };
  /** Sender email address from a verified domain. */
  senderEmail: string;
  /** Email content to be sent. */
  content: EmailContent;
  /** Recipients for the email. */
  recipients: EmailRecipients;
  /** List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB. */
  attachments?: EmailAttachment[];
  /** Email addresses where recipients' replies will be sent to. */
  replyTo?: EmailAddress[];
  /** Indicates whether user engagement tracking should be disabled for this request if the resource-level user engagement tracking setting was already enabled in the control plane. */
  disableUserEngagementTracking?: boolean;
}

/** Content of the email. */
export interface EmailContent {
  /** Subject of the email message */
  subject: string;
  /** Plain text version of the email message. */
  plainText?: string;
  /** Html version of the email message. */
  html?: string;
}

/** Recipients of the email */
export interface EmailRecipients {
  /** Email To recipients */
  to?: EmailAddress[];
  /** Email CC recipients */
  cc?: EmailAddress[];
  /** Email BCC recipients */
  bcc?: EmailAddress[];
}

/** An object representing the email address and its display name */
export interface EmailAddress {
  /** Email address. */
  email: string;
  /** Email display name. */
  displayName?: string;
}

/** Attachment to the email. */
export interface EmailAttachment {
  /** Name of the attachment */
  name: string;
  /** MIME type of the content being attached. */
  type: string;
  /** Base64 encoded contents of the attachment */
  contentBytesBase64: string;
}

/** Defines headers for Email_getSendStatus operation. */
export interface EmailGetSendStatusHeaders {
  /** Amount of time client should wait before retrying the request, specified in seconds */
  retryAfter?: number;
}

/** Defines headers for Email_getSendStatus operation. */
export interface EmailGetSendStatusExceptionHeaders {
  /** Error code - this will be the same as the code in the error property in the response body. */
  xMsErrorCode?: string;
}

/** Defines headers for Email_send operation. */
export interface EmailSendHeaders {
  /** Status of a repeatable request. */
  repeatabilityResult?: string;
  /** Location url of where to poll the status of this message from. */
  operationLocation?: string;
  /** System generated GUID indicating the id of this specific message, to be used for tracking purposes. */
  xMsRequestId?: string;
}

/** Defines headers for Email_send operation. */
export interface EmailSendExceptionHeaders {
  /** Error code - this will be the same as the code in the error property in the response body. */
  xMsErrorCode?: string;
}

/** Known values of {@link SendStatus} that the service accepts. */
export enum KnownSendStatus {
  /** The message has passed basic validations and has been queued to be processed further. */
  Queued = "queued",
  /** The message has been processed and is now out for delivery. */
  OutForDelivery = "outForDelivery",
  /** The message could not be processed and was dropped. */
  Dropped = "dropped"
}

/**
 * Defines values for SendStatus. \
 * {@link KnownSendStatus} can be used interchangeably with SendStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **queued**: The message has passed basic validations and has been queued to be processed further. \
 * **outForDelivery**: The message has been processed and is now out for delivery. \
 * **dropped**: The message could not be processed and was dropped.
 */
export type SendStatus = string;

/** Optional parameters. */
export interface EmailGetSendStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSendStatus operation. */
export type EmailGetSendStatusResponse = EmailGetSendStatusHeaders &
  SendStatusResult;

/** Optional parameters. */
export interface EmailSendOptionalParams extends coreClient.OperationOptions {
  /** Tracking ID sent with the request to help with debugging. */
  clientRequestId?: string;
}

/** Contains response data for the send operation. */
export type EmailSendResponse = EmailSendHeaders;

/** Optional parameters. */
export interface EmailRestApiClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
